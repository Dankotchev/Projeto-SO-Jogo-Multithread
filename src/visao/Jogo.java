package visao;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;
import modelo.Jogador;
import modelo.ObjFixo;
import modelo.ObjMovimento;

public class Jogo extends javax.swing.JFrame {

    private Jogador jogador;
    private List<ObjFixo> fixos = new ArrayList<>();
    private List<ObjMovimento> drop = new ArrayList<>();

    private String diversosDrops[] = {"/recurso/objmov01.png", "/recurso/objmov02.png",
        "/recurso/objmov03.png"};

    public Jogo() {
        initComponents();
        this.setLocationRelativeTo(this);

        jogador = new Jogador(this.getWidth() / 2, this.getHeight(), "/recursos/jogador.png", 3, true, this);

        // Inserção de Elementos Drop, acima da tela de jogo, para cairem "aos poucos"
        for (int i = 0; i < 10; i++) {
            ObjMovimento om = new ObjMovimento(randomizarPosicaoInicial(this.getHeight()),
                    -100, this.randomizarDrop(), 1, true, this);
            drop.add(om);
            Thread threadDrop = new Thread(om);
            threadDrop.start();
        }
    }

    private int randomizarPosicaoInicial(int largura) {
        // Uma margem lateral de 50 pixel para cada lado da tela ao criar novos Drops
        return 50 + ((int) Math.random() * (largura - 100));
    }

    private String randomizarDrop() {
        int i = (int) (Math.random() * this.diversosDrops.length);
        return this.diversosDrops[i];
    }

//    // PROTOTIPO DA COLISÃO
//    public void checarColisao() {
//        if (!nave.getTiros().isEmpty()) {
//            for (int i = 0; i < nave.getTiros().size(); i++) { //tm do VETOR DO TIRO 
//                Tiro tiro = nave.getTiros().get(i);//tira tiro por tiro um por vez
//                if (tiro.isVisivel()) { // SE P TIRO TIVER VISIVEL
//                    if (!aliens.isEmpty()) {
//                        for (int x = 0; x < aliens.size(); x++) {
//                            Alien a = aliens.get(x);
//                            if (a.isVisivel()) {//NAO FAZ SENTIDO CONTINUAR O COD SE o alien for invisisvel
//                                // verificao colicao 
//                                if (tiro.getBordas().intersects(a.getBordas())) {
//                                    a.setVida(0);
//                                    tiro.setVida(0);
//                                    aliens.remove(a);
//                                    nave.getTiros().remove(tiro);
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }
//    }

    // Isso aqui em teoria coloca os objetos na tela
    @Override
    public void paint(Graphics g) {
        Graphics2D graficos = (Graphics2D) g;

//        graficos.drawImage(fundo, 0, 0, null);
        if (jogador.isVisivel()) {
            graficos.drawImage(jogador.getImagem(), jogador.getX(), jogador.getY(), this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 700));
        setMinimumSize(new java.awt.Dimension(600, 700));
        setPreferredSize(new java.awt.Dimension(600, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jogo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
